@Library("Koala-osmagic-pipeline-compass") _

import com.osmagic.pipeline.compass.utils.CommUtils

pipeline {

    agent any

    parameters {
        choice(name: 'Koala-osmaigc-all-barnch', choices: ['1.0.0.20210625-alpha','dev', 'test', 'master'], description: 'Koala-osmagic-all分支')

        string(name: 'ServerIp', defaultValue: '10.10.8.5', description: '服务器地址')
        password(name: 'ServerPs', defaultValue: '12345', description: ' 服务器root账号密码')

        booleanParam(name: '000-build-all-application[构建全部应用]', defaultValue: false, description: '')
        booleanParam(name: 'A01-Koala-xxxxxxxx-all-eureka[注册中心]', defaultValue: false, description: '')
        booleanParam(name: 'A02-Koala-xxxxxxxx-all-gateway[网关服务]', defaultValue: false, description: '')
        booleanParam(name: 'A03-Koala-xxxxxxxx-all-hyperion[特征库服务]', defaultValue: false, description: '')
        booleanParam(name: 'A04-Koala-xxxxxxxx-all-titan[流式服务]', defaultValue: false, description: '')
        booleanParam(name: 'A05-Koala-xxxxxxxx-all-oceanus[数据处理服务]', defaultValue: false, description: '')
        booleanParam(name: 'A06-Koala-xxxxxxxx-all-iapetus[流媒体服务]', defaultValue: false, description: '')
        booleanParam(name: 'A07-Koala-xxxxxxxx-all-themis[GPU采集服务]', defaultValue: false, description: '')
        booleanParam(name: 'A08-Koala-xxxxxxxx-all-theia[公共服务]', defaultValue: false, description: '')
        booleanParam(name: 'A21-Koala-xxxxxxxx-all-bower[账号管理]', defaultValue: false, description: '')
        booleanParam(name: 'A22-Koala-xxxxxxxx-all-power[AI演示平台]', defaultValue: false, description: '')
        booleanParam(name: 'A23-Koala-xxxxxxxx-all-tower[AI学习平台]', defaultValue: false, description: '')
        booleanParam(name: 'B22-Koala-xxxxxxxx-learn-power-web[AI演示平台页面]', defaultValue: false, description: '')
        booleanParam(name: 'B23-Koala-xxxxxxxx-learn-tower-web[AI学习平台页面]', defaultValue: false, description: '')
    }

    environment {
        labelItem = "default"
        Sauce_Access = credentials('GitKey')
        Koala_osmagic_ding_address = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx"
        Koala_osmagic_all_address = "http://${Sauce_Access}@192.168.2.xxx:8888/xxxxxxxx-all/Java/Koala-osmagic-all.git"
        Koala_osmagic_learn_power_web_address = "http://${Sauce_Access}@192.168.2.xxx:8888/xxxxxxxx-all/Web/Koala-osmagic-learn-power-web.git"
        Koala_osmagic_learn_tower_web_address = "http://${Sauce_Access}@192.168.2.xxx:8888/xxxxxxxx-all/Web/Koala-osmagic-learn-tower-web.git"
    }

    stages {
        stage("Verify") {
            steps {
                /*
                * 对共享库vars中的调用, 只能放在script代码块中
                */
                script {
                    String item = "Verify"
                    println("script ... $item")

                    // 调用成功, 也可以直接使用 wheel("item") 和 wheel "item" 两种方式调用
                    wheel.call("item")

                    // libraryResource读取resources目录下文件内容 成功
                    def ctx = libraryResource "algo.json"
                    println("ctx: $ctx")

                    // 调用通过
                    //steering.car "nice"

                    // 调用通过
                    //steering.bus "nice"

                    // 并行尝试, 调用通过
                    //steering.bike "nice"

                    // 调用失败
                    //def items = ["Java", "Web", "Cxx"]
                    //engine.compiles items
                }

                echo "Verify finish ... "
            }
        }

        stage("Init") {
            steps {
                script {
                    println("[INFO ] Generic   finish .... ")
                }
            }
        }

        stage("Prepare") {
            parallel {
                // Java和Web
                stage("Web") {
                    when {
                        expression { return false }
                        // expression { return CommUtils.generic("Java", "Web", "C") }
                    }
                    agent {
                        //docker pull node:latest
                        docker { image 'node:latest' }
                    }
                    steps {
                        script {
                            sh "node -v"
                            println("[INFO ] Web(Node) finish .... ")
                            sh "yarn -v"
                            println("[INFO ] Web(Yarn) finish .... ")
                        }
                    }

                    /*stage("Node"){
                        steps {
                            script {
                                sh "node -v"
                                println("[INFO ] Web(Node) finish .... ")
                            }
                        }
                    }*/

                    /*stage("Yarn"){
                        steps {
                            script {
                                sh "yarn -v"
                                println("[INFO ] Web(Yarn) finish .... ")
                            }
                        }
                    }*/
                }


                // Java和Web
                stage("JavaWeb") {
                    when {
                        expression { return false }
                        // expression { return CommUtils.generic("Java", "Web", "C") }
                    }
                    agent {
                        // docker pull maven:3.8.1-jdk-8
                        docker { image 'maven:3.8.1-jdk-8' }
                    }
                    steps {
                        script {
                            sh "java -version && mvn -version"
                            println("[INFO ] JavaWeb   finish .... ")
                        }
                    }
                }

                // 算法服务
                stage("Algorithm") {
                    when {
                        expression { return CommUtils.algorithm("Algo", "B", "C") }
                    }
                    agent {
                        // docker pull maven:3.8.1-jdk-8
                        docker {
                            label 'algo'
                            image '192.168.2.100:5000/osmagic/aisdk:v7.4'
                            args '--runtime=nvidia --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --privileged=true --user root -e NVIDIA_VISIBLE_DEVICES=all -e CUDA_HOME=1 -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock -v /etc/timezone:/etc/timezone '
                        }
                    }
                    steps {
                        script {
                            def wsItem = "Koala-osmagic-algo"
                            sh """
                                if [ ! -d "$wsItem" ]; then
                                    mkdir $wsItem
                                fi
                            """
                            sh "git --version && pwd && ls -l && nvidia-smi && cd $wsItem && ls -l && docker images"
                            down.clone wsItem, "workspace", params.get("Koala-osmaigc-all-barnch"), "http://192.168.2.100:8888/osmagic-all/Cpp/city_manager/workspace.git"
                            def abs = ["MotorVehicleParking"]
                            def apis = ["/statical/api/v1/obj-detect/road-damaged"]
                            def pathItem = "${env.WORKSPACE}/$wsItem/workspace/magic_center_cfg.xml"
                            def contentItem = CommUtils.xmlContent(pathItem, abs, apis)
                            sh """
                                pwd && ls -l && cd $wsItem && ls -l
                                cd workspace && 
                                sed -e "s/http:\\/\\//http:\\/\\/${env.Sauce_Access}@/g" download.sh > download.sh.1 && 
                                cat download.sh.1 &&
                                sh download.sh.1 &&
                                pwd && ls -l &&
                                bash build_all.sh &&
                                echo "$contentItem" > magic_center_cfg.xml &&
                                cat magic_center_cfg.xml &&
                                \\cp -rf ../KLAlgorithmLib/configs city_manager &&
                                \\cp -rf magic_center_cfg.xml city_manager &&
                                ls -l city_manager && pwd && ls -l &&
                                echo "
                                FROM 192.168.2.100:5000/osmagic/runtime:v1.0
                                MAINTAINER STQF <470524151@qq.com>
                                COPY city_manager /root/koala/osmagic
                                CMD ["/bin/bash","/root/koala/osmagicmagic_center"]
                                ENV TZ=Asia/Shanghai \\
                                    NVIDIA_VISIBLE_DEVICES=0 \\
                                    NVIDIA_DRIVER_CAPABILITIES=video,compute,utility
                                USER root
                                WORKDIR /root/koala/osmagic " > Dockerfile && cat Dockerfile &&
                                docker build -t 192.168.2.100:5000/osmagic-all/micro-algo-statical/city-manger:v1.0.1 .
                             """
                            println("[INFO ] Algorithm finish .... ")
                        }
                    }
                }
            }
        }

        stage("Deploy") {
            steps {
                script {
                    println("[INFO ] Deploy finish  .... ")
                }
            }
        }

    }

}